package src.main.java.admin.persona;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.text.ParseException;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;
import src.main.java.admin.evento.VentanaBuscarEvento;
import src.main.java.admin.validator.PersonaValidator;
import src.main.java.login.Login;


public class ImportarPersona extends JDialog {
	
	public ImportarPersona(final VentanaBuscarPersona ventanaBuscarPersona, boolean modal) {
		super(ventanaBuscarPersona, modal);
		//setSize(new Dimension(624, 379));
		//setResizable(true);
		//pack();
		setPreferredSize(new Dimension(624, 379));
		setLocationByPlatform(true);
		initComponents();
	}

//	private final JPanel contentPanel = new JPanel();
//
//	{
//        initComponents();
//    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
    	
    	
    	
    	
    	
    	
    	
    	
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();

        //setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
//                {null, null, null, null},
//                {null, null, null, null},
//                {null, null, null, null},
//                {null, null, null, null}
            },
            new String [] {
//                "Title 1", "Title 2", "Title 3", "Title 4",  "Title 4" , "Title 4"
//                , "Title 4", "Title 4", "Title 4", "Title 4", "Title 4", "Title 4"
//                , "Title 4", "Title 4", "Title 4", "Title 4"
//                , "Title 17"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
       // jTable1.setTableHeader(null);
        setJMenuBar(jMenuBar1);
        
        btnAdd = new JButton("");
        btnAdd.setToolTipText("Agregar XLS");
        btnAdd.setIcon(new ImageIcon(ImportarPersona.class.getResource("/imgs/add.png")));
        
		Image img3 = ((ImageIcon) btnAdd.getIcon()).getImage();
		Image newimg3 = img3.getScaledInstance(32, 32,
				java.awt.Image.SCALE_SMOOTH);
		btnAdd.setIcon(new ImageIcon(newimg3));
		//getContentPane().add(btnAdd);
		btnAdd.setOpaque(false);
		btnAdd.setContentAreaFilled(false);
		btnAdd.setBorderPainted(false);
		
        btnAdd.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
                File file = chooseExcelFile();
                // do nothing if open dialog was cancelled
                if (file == null) {
                    return;
                }
                
                // loading long excel tables may be time consuming, so use wait cursor
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                
                Sheet sheet = readExcelSheet(file);
                if (sheet != null) {
                    displaySheet(sheet, jTable1);
                }
                
                setCursor(Cursor.getDefaultCursor());
                resizeColumnWidth(jTable1);
                jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                
                
                
        	}
        });
        jMenuBar1.add(btnAdd);
        
        JButton btnCancelar = new JButton("Cancelar");
        btnCancelar.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		dispose();
        	}
        });
        
        JButton btnImportar = new JButton("Importar");
        btnImportar.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		boolean error= false;
        		
        		//insert row to database
        		
        		{
        			int rows = jTable1.getRowCount();
        			
        			 String nombres,apellidos,fecha_nacimiento,id_pais_origen,
        			 id_pais_actual, id_genero, linea_baja, celular,
        			 id_nacionalidad, id_evento,ci, email= ""; // name is array and index 4 means no. of row 
        			// String apellidos= ""; //age is array and index 4 means no. of row
        			 
        			//loop from 0 row to 4
        			for(int i=1;i<rows;i++) 
        			 {
        			 nombres=jTable1.getValueAt(i,0).toString().toUpperCase(); // it get value from 0 row and 0 column
        			 apellidos=jTable1.getValueAt(i,1).toString().toUpperCase();  // it get value from 0 row and 1 column
        			 fecha_nacimiento= jTable1.getValueAt(i,2).toString();  
        			 id_pais_origen= jTable1.getValueAt(i,3).toString();  
        			 id_pais_actual = jTable1.getValueAt(i,4).toString();
        			 id_genero = jTable1.getValueAt(i,5).toString();
        			 linea_baja = jTable1.getValueAt(i,6).toString();
        			 celular = jTable1.getValueAt(i,7).toString();  
        			 id_nacionalidad = jTable1.getValueAt(i,8).toString();
        			 //id_evento = jTable1.getValueAt(i,9).toString();
        			 ci = jTable1.getValueAt(i,10).toString();
        			 email = jTable1.getValueAt(i,11).toString().toLowerCase(); 
        			 
        			 //validar//
        			 PersonaValidator pv = new PersonaValidator();
        			 try {
						if (pv.ValidarCodigo(ci) == true){
							JOptionPane.showMessageDialog(null,
									 "Ya existe una Persona con la Cédula Nro.:  " + ci,
									"Información",JOptionPane.WARNING_MESSAGE);
							break;
						}
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (org.json.simple.parser.ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
        			 
        			 
        			 
        			 //validar
        			 

        			//similarly for more column  
        			Connection jdbcConnection = null;
        			try
        			{
        			Class.forName("org.postgresql.Driver");
        			String url = "jdbc:postgresql://voto.db:5432/VOTOPY";
        			Connection con=DriverManager.getConnection(url,"ucsa2014", "ucsa2014");
        			Statement s1=con.createStatement();
        			System.out.println(
        	"insert into ucsaws_persona(id_persona, nombre,apellido, fecha_nacimiento,id_pais_origen, id_pais_actual,id_genero,tel_linea_baja, "
        	+ "tel_celular, id_nacionalidad,id_evento,ci, email, fch_ins,usuario_ins,  fch_upd,usuario_upd) "
        	+ "values(nextval("
        	+ "'ucsaws_persona_seq'),    '"+nombres+"','"+apellidos+"', '"+fecha_nacimiento+"','"+id_pais_origen+"','"+id_pais_actual+"',"
        			+ "'"+id_genero+"', '"+linea_baja+"', '"+celular+"', '"+id_nacionalidad+"', '"+  VentanaBuscarEvento.evento +"', '"+ci+"',"
        					+ "'"+email+"'   " 
        	
        	
        	+ ", now(), '" + Login.userLogeado + "' , now(), '" + Login.userLogeado + "' )");
        			
        			
        			
        			int mc=s1.executeUpdate(
        	"insert into ucsaws_persona(id_persona, nombre,apellido, fecha_nacimiento,id_pais_origen, id_pais_actual,id_genero,tel_linea_baja, "
        	+ "tel_celular, id_nacionalidad,id_evento,ci, email, fch_ins,usuario_ins,  fch_upd,usuario_upd) "
        	+ "values(nextval("
        	+ "'ucsaws_persona_seq'),    '"+nombres+"','"+apellidos+"', '"+fecha_nacimiento+"','"+id_pais_origen+"','"+id_pais_actual+"',"
        			+ "'"+id_genero+"', '"+linea_baja+"', '"+celular+"', '"+id_nacionalidad+"', "+  VentanaBuscarEvento.evento +", '"+ci+"',"
        					+ "'"+email+"'   " 
        	
        	
        	+ ", now(), '" + Login.userLogeado + "' , now(), '" + Login.userLogeado + "' )");
        			
        			con.close();

        			}

        			        catch(Exception ex)
        			        {
        			            javax.swing.JOptionPane.showMessageDialog(null,ex.getMessage().toString());
        			            error = true;

        			        }
        			
            		}
        			if (error == false){
            			dispose();
        			 }
        		
        		
        		}}
        		
        	
        		
        		//insert row to database
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
        					.addContainerGap())
        				.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        					.addComponent(btnImportar)
        					.addGap(44)
        					.addComponent(btnCancelar)
        					.addGap(90))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 256, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnImportar)
        				.addComponent(btnCancelar)))
        );
        getContentPane().setLayout(layout);
        pack();
        setLocationRelativeTo(this.getParent());
    }// </editor-fold>//GEN-END:initComponents
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTable jTable1;
    private JButton btnAdd;
    private JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
    /** Reads given excel file and returns its first sheet.
     *
     * @param file Input excel spreadsheet file
     * @return First sheet or null if file can't be read or have no sheets
     */
    private Sheet readExcelSheet(File file) {
        // open excel file (workbook) for reading
        Workbook wbk;
        try {
        	WorkbookSettings ws = new WorkbookSettings();
        	ws.setEncoding("Cp1252");
            wbk = Workbook.getWorkbook(file,ws);
        } catch (Exception ex) {
            JOptionPane message = new JOptionPane(
                    "Can't read excel file " + file.getPath(),
                    JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if (wbk.getNumberOfSheets() <= 0) {
            JOptionPane message = new JOptionPane(
                    "Excel file doesn't have any sheets.",
                    JOptionPane.ERROR_MESSAGE);
            return null;
        }
        // return first sheet
        return wbk.getSheet(0);
    }
    
    /** Takes given sheet data and displays them in very simple way in
     * given table.
     *
     * @param sheet Excel sheet
     * @param table JTable to display sheet data in
     */
    private void displaySheet(Sheet sheet, JTable table) {
    	
    	
        table.setModel(new SheetTableModel(sheet));
        
    }
    
    /** Read-only TableModel implementation, which adapts Sheet object from
     * JExcelApi library for use as JTable model.
     */
    private static class SheetTableModel implements TableModel {
        
        private Sheet sheet;
        
        public SheetTableModel(Sheet sheet) {
            this.sheet = sheet;
        }
        
        public int getRowCount() {
            return sheet.getRows();
        }
        
        public int getColumnCount() {
            return sheet.getColumns();
        }
        
        /** Copied from javax.swing.table.AbstractTableModel,
         * to name columns using spreadsheet conventions:
         *  A, B, C, . Z, AA, AB, etc.
         */
        public String getColumnName(int column) {
        	Cell c[] = sheet.getRow(0);
        	int i = 0;
        	String result = "";
        	//while (i < c.length){
        		//result = result + c[i].getContents() ; 
        	//	result = ((column%26)+ c[i].getContents()) + result;
        	//	i++;
        	//}
            
           for (; column >= 0; column = column / 26 - 1) {
              // result = (char)((char)(column%26)+'A') + result;
               result = c[column].getContents() + result;
            }
            return result;
        }
        
        public Class<?> getColumnClass(int columnIndex) {
            return String.class;
        }
        
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            // table is read only for demo purposes
            return false;
        }
        
        public Object getValueAt(int rowIndex, int columnIndex) {
            Cell cell = sheet.getCell(columnIndex, rowIndex);
            return cell.getContents();
        }
        
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            // no operation, table is read only for demo purposes
        }
        
        public void addTableModelListener(TableModelListener l) {
            // no operation, table is read only for demo purposes
        }
        
        public void removeTableModelListener(TableModelListener l) {
            // no operation, table is read only for demo purposes
        }
        
    }  // end of SheetTableModel
    
    /** Opens dialog for user to choose an excel file to open and read.
     *
     * @return Excel file or null if user cancelled the dialog
     */
    private File chooseExcelFile() {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new XLSFilter());
        
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile();
        }
        // cancel was clicked
        return null;
    }
    
    /** Filter which accepts only xls files */
    private static class XLSFilter extends FileFilter {
        public boolean accept(File f) {
            return f.isDirectory() || f.getName().endsWith(".xls");
        }
        
        public String getDescription() {
            return "Excel spreadsheet XLS files";
        }
    }
    
    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width +1 , width);
            }
            if(width > 300)
                width=300;
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
    
//    public void cierraConexion() {
//        try {
//            Conector.close();
//        } catch (SQLException sqle) {
//            JOptionPane.showMessageDialog(null, "Error al cerrar conexion", "Error", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(ConexionDAO.class.getName()).log(Level.SEVERE, null, sqle);
//        }
//    }
}
